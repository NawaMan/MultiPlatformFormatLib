name: Build and Test ICU4C

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # x86-64 Build Job
  build-x86-64:
    name: Build (Linux x86-64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set non-interactive frontend
        run: echo 'DEBIAN_FRONTEND=noninteractive' >> $GITHUB_ENV

      - name: Build on x86-64
        run: |
          chmod +x *.sh
          mkdir -p build
          mkdir -p dist

          echo "Ensure build environment ..."
          sudo ./ensure-linux-x86-build-environment.sh

          echo "Build ..."
          ./build-linux-x86-64.sh
            
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: fmt-linux-x86-64
          path: dist/fmt-*_linux-x86-64_*.zip
          if-no-files-found: error
          retention-days: 1

  # x86-64 Build Test Job
  build-test-x86-64:
    name: Build Test (Linux x86-64)
    needs: build-x86-64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set non-interactive frontend
        run: echo 'DEBIAN_FRONTEND=noninteractive' >> $GITHUB_ENV

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: fmt-linux-x86-64
          path: dist

      - name: Run on x86-64
        run: |
            # Install minimal dependencies for testing
            sudo apt-get update
            sudo apt-get install -y      \
              build-essential            \
              gnupg                      \
              lsb-release                \
              unzip                      \
              wget                       \
              2>&1 | grep -E 'is already the newest version|Setting up|Preparing to unpack|Installing'

            sudo ./ensure-linux-llvm-setup.sh

            DIST_FILE=$(find dist -name 'fmt-*_linux-x86-64_*.zip' -type f)

            cd tests
            ./build-simple-test-linux-x86-64.sh "../$DIST_FILE"

      - name: Upload test artifact
        uses: actions/upload-artifact@v4
        with:
          name: fmt-linux-x86-64-test
          path: tests/simple-test
          if-no-files-found: error
          retention-days: 1

  # x86-64 Run Test Job
  run-test-x86-64:
    name: Run Test (Linux x86-64)
    needs: build-test-x86-64
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: fmt-linux-x86-64-test

      - name: Run test
        run: |
            chmod +x simple-test
            ./simple-test


  # ARM-64 Build Job
  build-arm-64:
    name: Build (Linux ARM-64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set non-interactive frontend
        run: echo 'DEBIAN_FRONTEND=noninteractive' >> $GITHUB_ENV

      - name: Run on ARM-64
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu22.04
          run: |
            chmod +x *.sh
            mkdir -p build
            mkdir -p dist

            echo "Ensure build environment ..."
            ./ensure-linux-arm-build-environment.sh

            echo "Build ..."
            ./build-linux-arm-64.sh
            
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: fmt-linux-arm-64
          path: dist/fmt-*_linux-arm-64_*.zip
          if-no-files-found: error
          retention-days: 1

  # ARM-64 Build Test Job
  build-test-arm-64:
    name: Build Test (Linux ARM-64)
    needs: build-arm-64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set non-interactive frontend
        run: echo 'DEBIAN_FRONTEND=noninteractive' >> $GITHUB_ENV

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: fmt-linux-arm-64
          path: dist

      - name: Run on ARM-64
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu22.04
          run: |
            # Set environment variables
            export CLANG_VERSION=20

            # Install minimal dependencies for testing
            apt-get update
            apt-get install -y           \
              build-essential            \
              cmake                      \
              curl                       \
              gnupg                      \
              lsb-release                \
              software-properties-common \
              pkg-config                 \
              unzip                      \
              wget                       \
              2>&1 | grep -E 'is already the newest version|Setting up|Preparing to unpack|Installing'
            
            ./ensure-linux-llvm-setup.sh

            DIST_FILE=$(find dist -name 'fmt-*_linux-arm-64_*.zip' -type f)

            cd tests
            ./build-simple-test-linux-arm-64.sh "../$DIST_FILE"

      - name: Upload test artifact
        uses: actions/upload-artifact@v4
        with:
          name: fmt-linux-arm-64-test
          path: tests/simple-test
          if-no-files-found: error
          retention-days: 1

  # ARM-64 Run Test Job
  run-test-arm-64:
    name: Run Test (Linux ARM-64)
    needs: build-test-arm-64
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: fmt-linux-arm-64-test

      - name: Install dependencies
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu22.04
          run: |
            chmod +x simple-test
            ./simple-test

  # Windows Build Job
  build-windows:
    name: Build (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup LLVM/Clang
        shell: pwsh
        run: |
          .\Ensure-WindowsLlvmSetup.ps1

      - name: Build on Windows
        shell: pwsh
        run: |
          # Create build directories
          New-Item -ItemType Directory -Path build -Force | Out-Null
          New-Item -ItemType Directory -Path dist -Force | Out-Null

          # TODO: Add Windows build script here
          # Example: .\build-windows.ps1

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: fmt-windows
          path: dist/fmt-*_windows_*.zip
          if-no-files-found: warn
          retention-days: 1
